type state_enl = ON | SEND | OFF
node enlace(c, status: bool) returns (estado:int)
let
    automaton

        state STOFF do
            estado = 0;
        unless status & c then STSEND
            | status then STON

        state STON do
            estado = 1;
        unless c then STSEND
            | not status then STOFF

        state STSEND do
            estado = 2;
        unless c then STON
            | not status then STOFF

    end
tel

type prot = HTTP | SMTP | FTP
node protocolos(nota_http, nota_smtp, nota_ftp:int) returns (estado: prot;melhor_valor:int)
let
    automaton

        state STHTTP do
            estado = HTTP;
            melhor_valor = nota_http;
        unless nota_ftp <= nota_http then STFTP
            | nota_smtp <= nota_http then STSMTP

        state STFTP do
            estado = FTP;
            melhor_valor = nota_ftp;
        unless nota_http <= nota_ftp then STHTTP
            | nota_smtp <= nota_ftp then STSMTP

        state STSMTP do
            estado = SMTP;
            melhor_valor = nota_smtp;
        unless nota_ftp <= nota_smtp then STFTP
            | nota_http <= nota_smtp then STHTTP

    end
tel

(* type enl = EH | WF | TG
node escolha_enlace(valor_3g, valor_wf, valor_eth: int) returns (enlace:enl)
let
    automaton

        state ETH do
            enlace = EH;
        unless ((valor_wf <= valor_3g) & (valor_wf < valor_eth)) then WIFI
            |  ((valor_3g <= valor_wf) & (valor_3g < valor_eth)) then TresG

        state WIFI do
            enlace = WF;
        unless ((valor_eth <= valor_3g) & (valor_eth <= valor_wf)) then ETH
            |  ((valor_3g <= valor_eth) & (valor_3g < valor_wf)) then TresG

        state TresG do
            enlace = TG;
        unless ((valor_eth <= valor_3g) & (valor_eth <= valor_wf)) then ETH
            |  ((valor_wf <= valor_eth) & (valor_wf < valor_3g)) then WIFI

    end
tel *)

node controlador_multihomed (status_3g, ceth, status_eth, cwf, status_wf: bool; nota_http3g, nota_smtp3g, nota_ftp3g, nota_httpwf, nota_smtpwf, nota_ftpwf, nota_httpeth, nota_smtpeth, nota_ftpeth:int) returns (estado_3g, estado_eth, estado_wf: int; prot_3g, prot_wf, prot_eth:prot; valor_3g, valor_wf, valor_eth: int; test: bool;)
    contract
        var 
            regra3g: bool;
        let
            (* if estado_3g = ON
            then regra3g = not (true) or (estado_3g = SEND)
            else regra3g = true
            end *)
            (* switch last estado_3g 
                | ON do regra3g = not ((valor_3g <= valor_eth) & (valor_3g < valor_wf)) or (true)
                | SEND do regra3g = true
                | OFF do regra3g = true;
            end *)
            regra3g = not ((valor_3g <= valor_eth) & (valor_3g < valor_wf) & estado_3g > 0) or (estado_3g = 2);
        tel
        enforce regra3g
                with (c3g: bool)
(*     var
         last estado_3g: state_enl = OFF; *)

let
    test = not ((valor_3g <= valor_eth) & (valor_3g < valor_wf) & estado_3g > 0);
    estado_3g = inlined enlace(c3g, status_3g);
    estado_eth = inlined enlace(ceth, status_eth);
    estado_wf = inlined enlace(cwf, status_wf);
    (prot_3g, valor_3g) = inlined protocolos(nota_http3g, nota_smtp3g, nota_ftp3g);
    (prot_wf, valor_wf) = inlined protocolos(nota_httpwf, nota_smtpwf, nota_ftpwf);
    (prot_eth, valor_eth) = inlined protocolos(nota_httpeth, nota_smtpeth, nota_ftpeth);
    (* enlace = inlined escolha_enlace(valor_3g, valor_wf, valor_eth); *)
    
tel
